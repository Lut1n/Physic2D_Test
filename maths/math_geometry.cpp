#include "math_geometry.hpp"

// --------------------------------------------------------------------------
Shape::Shape() {}

// --------------------------------------------------------------------------
Shape::~Shape() {}



// --------------------------------------------------------------------------
Circle::Circle() {}

// --------------------------------------------------------------------------
Circle::Circle(const Vec2& c, float r) : center(c), radius(r) {}

// --------------------------------------------------------------------------
Circle::~Circle() {}

// --------------------------------------------------------------------------
void Circle::move(const Vec2& va) { center+=va; }



// --------------------------------------------------------------------------
Polygon::Polygon() {}

// --------------------------------------------------------------------------
Polygon::Polygon(const Arr<Vec2>& v) : vertices(v) {}

// --------------------------------------------------------------------------
Polygon::Polygon(float w, float h, Vec2 c) { buildRect(w,h,c); }

// --------------------------------------------------------------------------
Polygon::~Polygon() {}

// --------------------------------------------------------------------------
void Polygon::buildRect(float w, float h, Vec2 c)
{
    float dw = w*0.5f;
    float dh = h*0.5f;
    
    vertices.clear();
    insert( c+Vec2(-dw,-dh) );
    insert( c+Vec2(-dw,dh) );
    insert( c+Vec2(dw,dh) );
    insert( c+Vec2(dw,-dh) );
}

// --------------------------------------------------------------------------
void Polygon::clone(const Polygon& p) { vertices = p.vertices; }

// --------------------------------------------------------------------------
void Polygon::insert(const Vec2& v) { vertices.push_back(v); }

// --------------------------------------------------------------------------
void Polygon::move(const Vec2& va) { for(auto& v : vertices) v+=va; }

// --------------------------------------------------------------------------
void Polygon::rotate(float r)
{
    sf::Transform rot; rot.rotate(r);
    for(auto& v : vertices) v=rot*v;
}
